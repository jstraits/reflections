What happens when you initialize a repository? Why do you need to do it?

	Initializing a repository is essentially creating a new repository from the
	file or folder you have specified.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area allows you to get files ready to be committed without actually
	making the commit. It allows you to make sure everything is want you want in the
	commit, plus it allows you to add notes before committing.

How can you use the staging area to make sure you have one commit per logical
change?

	You can use git diff and git status to help determine what exactly is on the 
	staging area and what exactly was changed. This lets you figure out if you
	should commit logically or not.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches are useful with experimental projects, or different versions of the 
	same files but not necessarily the final or only version, such as multiple 
	languages or difficulties.

How do the diagrams help you visualize the branch structure?

	Diagrams allow you to see the branches of commits in a visual way.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches takes all the commits from both branches and combines them.
	It's literally a new tip at the end of the branch, so it makes sense to connect
	the lines together.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Manual merges take more time than automatic, but it lets you fully control the 
	merge and exactly everything that goes into it.